(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["TSerializer"] = factory();
	else
		root["TSerializer"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(1));
	__export(__webpack_require__(3));
	__export(__webpack_require__(4));
	__export(__webpack_require__(2));


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	/*
	 * Copyright 2016 - Daniel Popescu <dpopescu@adobe.com>
	 */
	var Serializer_1 = __webpack_require__(2);
	/**
	 * # Serialize decorators
	 * >**Note:** Can only be used on a class.
	 *
	 * ## How it works
	 * This annotation will add the implementation for [[Serializable.serialize]] and [[Serializable.deserialize]] methods on the class prototype.
	 * The current implementation will use the [[Serializer.serialize]] and [[Serializer.deserialize]] methods.
	 *
	 * ## Example
	 * ### Simple decorator
	 * ```JavaScript
	 *  @Serialize()
	 *  class MyClass extends Serializable {}
	 * ```
	 * ### Decorator with options
	 * ```JavaScript
	 *  @Serialize({
	 *      root: 'someRootObject'
	 *  })
	 *  class MyClass extends Serializable {}
	 * ```
	 * @param classOptions - A set of options to use when decorating the class.
	 * @returns {ClassDecorator}
	 */
	function Serialize(classOptions) {
	    return function (target) {
	        target.prototype.deserialize = function (jsonObject) {
	            Serializer_1.Serializer.deserialize(target, this, jsonObject, classOptions);
	        };
	        target.prototype.serialize = function () {
	            return Serializer_1.Serializer.serialize(target, this, classOptions);
	        };
	    };
	}
	exports.Serialize = Serialize;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Utility class to serialize and deserialize objects
	 */
	var Serializer = (function () {
	    function Serializer() {
	    }
	    /**
	     * Deserialize a property based on it's type.
	     * @see [[SerializeProperty]], [[PropertyOptions.type]]
	     * @param options - A set of options to use when deserializing this property.
	     * @param value - The object to deserialize.
	     * @returns {any} - The deserialized object.
	     */
	    Serializer.deserializeItem = function (options, value) {
	        if (options.type) {
	            var item = new options.type();
	            item.deserialize(value);
	            return item;
	        }
	        else {
	            return value;
	        }
	    };
	    /**
	     * Serialize a property based on it's type.
	     * @see [[SerializeProperty]], [[PropertyOptions.type]]
	     * @param options - A set of options to use when serializing this property.
	     * @param value - The object to serialize.
	     * @returns {Object} - The serialized object.
	     */
	    Serializer.serializeItem = function (options, value) {
	        if (options.type) {
	            return value.serialize();
	        }
	        else {
	            return value;
	        }
	    };
	    /**
	     * Serialize a class instance.
	     * @see [[Serialize]], [[ClassOptions]]
	     * @param target - Class type.
	     * @param context - Instance to serialize.
	     * @param classOptions - Class serialization options.
	     * @returns {Object} - The serialized object.
	     */
	    Serializer.serialize = function (target, context, classOptions) {
	        var result = {};
	        for (var name_1 in target.prototype._serializeMap) {
	            var value = context[name_1];
	            var options = target.prototype._serializeMap[name_1];
	            var rootPath = options.root || classOptions.root || null;
	            var mapName = options.map || options.name;
	            var dataTarget = result;
	            if (rootPath && rootPath != '.') {
	                if (!result[rootPath]) {
	                    result[rootPath] = {};
	                }
	                dataTarget = result[rootPath];
	            }
	            if (options.list) {
	                dataTarget[mapName] = [];
	                for (var i = 0; i < value.length; i++) {
	                    dataTarget[mapName].push(this.serializeItem(options, value[i]));
	                }
	            }
	            else {
	                dataTarget[mapName] = this.serializeItem(options, value);
	            }
	        }
	        return result;
	    };
	    /**
	     * Deserialize a class instance.
	     * @see [[Serialize]], [[ClassOptions]]
	     * @param target - Class type.
	     * @param context - Instance to deserialize.
	     * @param jsonObject - Object to deserialize.
	     * @param classOptions - Class deserialization options.
	     */
	    Serializer.deserialize = function (target, context, jsonObject, classOptions) {
	        if (classOptions === void 0) { classOptions = {}; }
	        for (var name_2 in target.prototype._serializeMap) {
	            var options = target.prototype._serializeMap[name_2];
	            var rootPath = options.root || classOptions.root || null;
	            var mapName = options.map || options.name;
	            var value = jsonObject[mapName];
	            if (rootPath && rootPath != '.') {
	                value = jsonObject[rootPath][mapName];
	            }
	            if (options.list) {
	                context[name_2] = [];
	                for (var i = 0; i < value.length; i++) {
	                    context[name_2].push(this.deserializeItem(options, value[i]));
	                }
	            }
	            else {
	                context[name_2] = this.deserializeItem(options, value);
	            }
	        }
	    };
	    return Serializer;
	}());
	exports.Serializer = Serializer;


/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * # SerializeProperty decorator
	 * >**Note:** Can only be used on class properties.
	 *
	 * ## How it works
	 * This annotation creates a new `_serializeMap` property on the class prototype and adds all decorated properties to this map.
	 * The [[Serializer]] will use this map to serialize and deserialize from/to json objects.
	 *
	 * ## Example
	 * ### Simple decorator
	 * ```JavaScript
	 *  @Serialize()
	 *  class MyClass extends Serializable {
	 *      @SerializeProperty()
	 *      simpleProperty:string;
	 *  }
	 * ```
	 * ### Decorator with options
	 * ```JavaScript
	 *  @Serialize()
	 *  class MyClass extends Serializable {
	 *      @SerializeProperty({
	 *          map: 'someMapping',
	 *          root: 'someObject'
	 *      })
	 *      simpleProperty:string;
	 *  }
	 * ```
	 * @param options - A set of options to use when decorating a property.
	 * @returns {PropertyDecorator}
	 */
	function SerializeProperty(options) {
	    if (options === void 0) { options = {}; }
	    return function (target, name) {
	        if (!target.constructor.prototype._serializeMap) {
	            target.constructor.prototype._serializeMap = {};
	        }
	        options.name = name;
	        target.constructor.prototype._serializeMap[name] = options;
	    };
	}
	exports.SerializeProperty = SerializeProperty;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * Helper class to represent serializable objects. The actual implementation of the [[Serializable.serialize]] and [[Serializable.deserialize]]
	 * will be provided by the [[Serializer]]
	 */
	var Serializable = (function () {
	    function Serializable() {
	    }
	    /**
	     * Serialize as JSON Object
	     */
	    Serializable.prototype.serialize = function () {
	        throw new Error('This is an abstract method. It needs to be overridden.');
	    };
	    /**
	     * Deserialize from JSON Object
	     * @param jsonObject - The source object.
	     */
	    Serializable.prototype.deserialize = function (jsonObject) {
	        throw new Error('This is an abstract method. It needs to be overridden.');
	    };
	    return Serializable;
	}());
	exports.Serializable = Serializable;


/***/ }
/******/ ])
});
;